generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id           String       @id @unique @default(uuid())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  deletedAt    DateTime?
  //
  email        String?      @unique
  name         String?
  phone        String?
  addr_country addr_Land?   @default(DE)
  addr_city    String?
  addr_zip     String?
  addr_street  String?
  addr_line1   String?
  addr_line2   String?
  orders       Order[]
  customerType CustomerType
}

model Order {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
  //
  seq         Int        @default(autoincrement())
  orderNumber String     @default(dbgenerated()) @db.VarChar(8)
  customer    Customer?  @relation(fields: [customerId], references: [id])
  customerId  String?
  positions   Position[]

  // ðŸ‘‡ VerknÃ¼pfung zur Beschwerde, wenn die Order aus einer Complaint entstanden ist
  generatedFromComplaint Complaint? @relation("ComplaintToOrder")
}

model Position {
  id           String          @id @unique @default(uuid())
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  deletedAt    DateTime?
  //
  order        Order           @relation(fields: [orderId], references: [id])
  orderId      String
  complaints   Complaint[]
  standardProductId String?
  //
  pos_number   Int
  description  String?
  Status       POSITION_STATUS @default(OPEN)
  amount       Int
  name         String
  color        String?
  shirtSize    ShirtSize?
  productCategory ProductCategory
  design       String
}

model StandardProduct {
  id                  String          @id @default(uuid())
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  deletedAt           DateTime?
  name                String
  color               String?
  shirtSize           ShirtSize?
  productCategory     ProductCategory
  minAmount           Int
  currentStock        Int             @default(0)
  amountInProduction  Int             @default(0)
}

model Complaint {
  id                String          @id @default(uuid())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  deletedAt         DateTime?

  // ðŸ‘‡ Position, zu der sich die Beschwerde bezieht
  position          Position        @relation(fields: [positionId], references: [id])
  positionId        String

  // ðŸ‘‡ Neue Order, die ggf. aus der Beschwerde entsteht
  newOrderId        String?   @unique
  newOrder          Order?    @relation("ComplaintToOrder", fields: [newOrderId], references: [id])

  ComplaintReason   ComplaintReason
  ComplaintKind     ComplaintKind
  createNewOrder    Boolean
}

enum POSITION_STATUS {
  OPEN
  FINISHED_MATERIAL_REQUESTED
  PRODUCTION_NOTIFIED
  IN_DYEING
  IN_PRINTING
  PRODUCTION_COMPLETED
  FINISHED_MATERIAL_READY_FOR_PICKUP
  READY_FOR_SHIPMENT
  SHIPPED
  COMPLETED
  CANCELLED
}

enum ComplaintReason {
  WRONG_SIZE
  WRONG_COLOR
  PRINT_INCORRECT
  PRINT_OFF_CENTER
  DAMAGED_ITEM
  STAINED
  LATE_DELIVERY
  WRONG_PRODUCT
  MISSING_ITEM
  BAD_QUALITY
  NOT_AS_DESCRIBED
  OTHER
}

enum ProductCategory {
  T_SHIRT
}

enum CustomerType {
  WEBSHOP
  BUSINESS
}

enum ShirtSize {
  S
  M
  L
  XL
}

enum ComplaintKind {
  INTERN
  EXTERN
}

enum PosLogSource {
  PROD
  MAWI
  VV
  WEBSHOP
}

enum addr_Land {
  DE
}
