generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id           String       @id @unique @default(uuid())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  deletedAt    DateTime?
  email        String?       @unique
  name         String?
  telefon      String?
  addr_land    addr_Land?    @default(DE)
  addr_ort     String?
  addr_plz     String?
  addr_strasse String?
  addr_hnr     String?
  addr_zusatz  String?
  orders       Order[]
  cust_type    CustomerType
  complaints   Complaint[]  // Add this field
}

model Order {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
  orderNumber String
  customer    Customer   @relation(fields: [customerId], references: [id])
  customerId  String
  positions   Position[]
  complaints  Complaint[]
}

model Position {
  id          String    @id @unique @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
  order       Order     @relation(fields: [orderId], references: [id])
  orderId     String
  product     Product   @relation(fields: [productId], references: [id])
  productId   String
  amount      Int
  description String?
  pos_number  Int
  Status      PosStatus @default(Offen)
  complaints  Complaint[]
  logs        PositionLog[] // Add this field
}

model ProdCategory {
  id       String    @id @unique @default(uuid())
  name     String
  Products Product[]
}

model Product {
  id          String       @id @unique @default(uuid())
  name        String
  color       Json?
  kindofshirt ShirtKind?
  sizeofshirt ShirtSize?
  Design      String?
  ProdCat     ProdCategory @relation(fields: [prodCategoryId], references: [id])
  prodCategoryId String
positions   Position[]   
}

model Complaint {
  id          String        @id @unique @default(uuid())
  createdAt   DateTime      @default(now())
  order_id    Order         @relation(fields: [orderId], references: [id])
  orderId     String
  position_id Position?     @relation(fields: [positionId], references: [id])
  positionId  String?
  customer_id Customer       @relation(fields: [customerId], references: [id])
  customerId  String
  Reason      String
  CompKind    Complaintkind
}

model PositionLog {
  id          String       @id @unique @default(uuid())
  timestamp   DateTime     @default(now())
  position_id Position      @relation(fields: [positionId], references: [id])
  positionId  String
  from        PosStatus?
  to          PosStatus
  editedBy    PosLogSource
}

enum PosStatus {
  Offen
  Fertigmaterial_angefragt
  Produktion_benachrichtigt
  in_FÃ¤rberei
  in_Druckerei
  Produktion_fertiggestellt
  Fertigmaterial_abholbereit
  Bereit_zum_Versand
  Versand_erfolgt
  Abgeschlossen
  Storniert
}

enum CustomerType {
  Webshop
  Firmenkunde
}

enum ShirtKind {
  Standard
  V_Ausschnitt
  Polo
}

enum ShirtSize {
  S
  M
  L
  XL
}

enum Complaintkind {
  intern
  extern
}

enum PosLogSource {
  PROD
  MAWI
  VV
  Webshop
}

enum addr_Land {
  DE
}